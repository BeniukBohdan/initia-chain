syntax = "proto3";

package ibc.applications.fetchprice.consumer.v1;

option go_package = "github.com/initia-labs/initia/x/ibc/fetchprice/consumer/types";

import "gogoproto/gogo.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "google/api/annotations.proto";
import "ibc/applications/fetchprice/v1/types.proto";

// Query provides defines the gRPC querier service.
service Query {
  // Price queries a price information.
  rpc Price(QueryPriceRequest) returns (QueryPriceResponse) {
    option (google.api.http).get = "/ibc/apps/fetchprice/consumer/v1/prices/{currency_id}";
  }

  // Prices queries prices.
  rpc Prices(QueryPricesRequest) returns (QueryPricesResponse) {
    option (google.api.http).get = "/ibc/apps/fetchprice/consumer/v1/prices";
  }

  // AllPrices queries all prices.
  rpc AllPrices(QueryAllPricesRequest) returns (QueryAllPricesResponse) {
    option (google.api.http).get = "/ibc/apps/fetchprice/consumer/v1/prices/all";
  }
}

// QueryPriceRequest is the request type for the Query/Price RPC
// method
message QueryPriceRequest {
  string currency_id = 1;
}

// QueryPriceResponse is the response type for the Query/Price RPC
// method.
message QueryPriceResponse {
  ibc.applications.fetchprice.v1.QuotePrice price = 1 [(gogoproto.nullable) = false];
}

// QueryPricesRequest is the request type for the Query/Prices RPC
// method
message QueryPricesRequest {
  repeated string currency_ids = 1;
}

// QueryPricesResponse is the response type for the Query/Prices RPC
// method.
message QueryPricesResponse {
  repeated ibc.applications.fetchprice.v1.CurrencyPrice prices = 1 [(gogoproto.nullable) = false];
}

// QueryAllPricesRequest is the request type for the Query/AllPrices RPC
// method
message QueryAllPricesRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryAllPricesResponse is the response type for the Query/AllPrices RPC
// method.
message QueryAllPricesResponse {
  // class_traces returns all class id traces information.
  repeated ibc.applications.fetchprice.v1.CurrencyPrice prices = 1 [(gogoproto.nullable) = false];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
