syntax = "proto3";

package ibc.applications.fetchprice.consumer.v1;

import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "ibc/core/client/v1/client.proto";

option go_package = "github.com/initia-labs/initia/x/ibc/fetchprice/consumer/types";

// Msg defines the ibc/fetchprice Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // FetchPrice defines a rpc handler method for MsgFetchPrice.
  rpc FetchPrice(MsgFetchPrice) returns (MsgFetchPriceResponse);
}

// MsgFetchPrice defines a msg to fetch a oracle price from provider chain
message MsgFetchPrice {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name)           = "fetchprice/MsgFetchPrice";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // the port on which the packet will be sent
  string source_port = 1 [(gogoproto.moretags) = "yaml:\"source_port\""];
  // the channel by which the packet will be sent
  string source_channel = 2 [(gogoproto.moretags) = "yaml:\"source_channel\""];
  // the list of currency ids to fetch price
  repeated string currency_ids = 3 [(gogoproto.moretags) = "yaml:\"currency_ids\""];
  // the sender address
  string sender = 4 [(gogoproto.moretags) = "yaml:\"sender\"", (cosmos_proto.scalar) = "cosmos.AddressString"];
  // Timeout height relative to the current block height.
  // The timeout is disabled when set to 0.
  ibc.core.client.v1.Height timeout_height = 5
      [(gogoproto.moretags) = "yaml:\"timeout_height\"", (gogoproto.nullable) = false];
  // Timeout timestamp in absolute nanoseconds since unix epoch.
  // The timeout is disabled when set to 0.
  uint64 timeout_timestamp = 6 [(gogoproto.moretags) = "yaml:\"timeout_timestamp\""];
  // optional memo
  string memo = 7;
}

// MsgFetchPriceResponse defines the Msg/FetchPrice response type.
message MsgFetchPriceResponse {
  // sequence number of the fetch price packet sent
  uint64 sequence = 1;
}
