// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/applications/fetchprice/v1/types.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the set of IBC fetchprice parameters.
type Params struct {
	// fetch_enabled enables or disables cross-chain oracle price icq query from this chain.
	FetchEnabled   bool `protobuf:"varint,1,opt,name=fetch_enabled,json=fetchEnabled,proto3" json:"fetch_enabled,omitempty" yaml:"fetch_enabled"`
	FetchActivated bool `protobuf:"varint,2,opt,name=fetch_activated,json=fetchActivated,proto3" json:"fetch_activated,omitempty" yaml:"fetch_activated"`
	// duration of the fetchprice timeout
	TimeoutDuration time.Duration `protobuf:"bytes,3,opt,name=timeout_duration,json=timeoutDuration,proto3,stdduration" json:"timeout_duration"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_853a8402b4739f0c, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetFetchEnabled() bool {
	if m != nil {
		return m.FetchEnabled
	}
	return false
}

func (m *Params) GetFetchActivated() bool {
	if m != nil {
		return m.FetchActivated
	}
	return false
}

func (m *Params) GetTimeoutDuration() time.Duration {
	if m != nil {
		return m.TimeoutDuration
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "ibc.applications.fetchprice.v1.Params")
}

func init() {
	proto.RegisterFile("ibc/applications/fetchprice/v1/types.proto", fileDescriptor_853a8402b4739f0c)
}

var fileDescriptor_853a8402b4739f0c = []byte{
	// 364 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0x3d, 0x6f, 0xe2, 0x30,
	0x18, 0xc7, 0xe3, 0x3b, 0x09, 0xa1, 0xdc, 0x0b, 0x47, 0x84, 0x4e, 0x81, 0xc1, 0x41, 0x99, 0x10,
	0xd2, 0xd9, 0xe2, 0xda, 0x09, 0xa9, 0x43, 0x69, 0xbb, 0xa2, 0x8a, 0xb1, 0x0b, 0x72, 0x8c, 0x09,
	0x96, 0x92, 0x38, 0x4a, 0x1c, 0x54, 0xbe, 0x42, 0xa7, 0x8e, 0x8c, 0x7c, 0x84, 0x7e, 0x0c, 0x46,
	0xc6, 0x4e, 0xb4, 0x82, 0xa1, 0x9d, 0x99, 0x3b, 0x54, 0xd8, 0x49, 0x9b, 0x2e, 0x96, 0xff, 0xcf,
	0xff, 0xf7, 0xbc, 0xe9, 0x31, 0xbb, 0xdc, 0xa3, 0x98, 0xc4, 0x71, 0xc0, 0x29, 0x91, 0x5c, 0x44,
	0x29, 0x9e, 0x32, 0x49, 0x67, 0x71, 0xc2, 0x29, 0xc3, 0xf3, 0x1e, 0x96, 0x8b, 0x98, 0xa5, 0x28,
	0x4e, 0x84, 0x14, 0x16, 0xe4, 0x1e, 0x45, 0x65, 0x16, 0x7d, 0xb2, 0x68, 0xde, 0x6b, 0x35, 0x7c,
	0xe1, 0x0b, 0x85, 0xe2, 0xe3, 0x4f, 0x67, 0xb5, 0xea, 0x24, 0xe4, 0x91, 0xc0, 0xea, 0xcd, 0x43,
	0x4d, 0x2a, 0xd2, 0x50, 0xa4, 0x63, 0xcd, 0x6a, 0x91, 0x5b, 0xd0, 0x17, 0xc2, 0x0f, 0x18, 0x56,
	0xca, 0xcb, 0xa6, 0x78, 0x92, 0x25, 0xaa, 0x99, 0xf6, 0xdd, 0x37, 0x60, 0x56, 0xae, 0x49, 0x42,
	0xc2, 0xd4, 0x3a, 0x33, 0x7f, 0xa9, 0xfe, 0x63, 0x16, 0x11, 0x2f, 0x60, 0x13, 0x1b, 0xb4, 0x41,
	0xa7, 0x3a, 0xb0, 0x0f, 0x5b, 0xa7, 0xb1, 0x20, 0x61, 0xd0, 0x77, 0xbf, 0xd8, 0xee, 0xe8, 0xa7,
	0xd2, 0x57, 0x5a, 0x5a, 0x17, 0x66, 0x4d, 0xfb, 0x84, 0x4a, 0x3e, 0x27, 0x92, 0x4d, 0xec, 0x6f,
	0xaa, 0x40, 0xeb, 0xb0, 0x75, 0xfe, 0x96, 0x0b, 0x7c, 0x00, 0xee, 0xe8, 0xb7, 0x8a, 0x9c, 0x17,
	0x01, 0x6b, 0x68, 0xfe, 0x91, 0x3c, 0x64, 0x22, 0x93, 0xe3, 0x62, 0x50, 0xfb, 0x7b, 0x1b, 0x74,
	0x7e, 0xfc, 0x6f, 0x22, 0xbd, 0x09, 0x2a, 0x36, 0x41, 0x97, 0x39, 0x30, 0xa8, 0xae, 0xb7, 0x8e,
	0xb1, 0x7c, 0x72, 0xc0, 0xa8, 0x96, 0x27, 0x17, 0x56, 0x1f, 0x2e, 0x57, 0x8e, 0xf1, 0xba, 0x72,
	0xc0, 0xdd, 0xcb, 0x43, 0xb7, 0x5e, 0x3a, 0x85, 0xde, 0x79, 0x30, 0x5c, 0xef, 0x20, 0xd8, 0xec,
	0x20, 0x78, 0xde, 0x41, 0x70, 0xbf, 0x87, 0xc6, 0x66, 0x0f, 0x8d, 0xc7, 0x3d, 0x34, 0x6e, 0x4e,
	0x7d, 0x2e, 0x67, 0x99, 0x87, 0xa8, 0x08, 0x31, 0x8f, 0xb8, 0xe4, 0xe4, 0x5f, 0x40, 0xbc, 0x34,
	0xff, 0xe3, 0x5b, 0x7c, 0x3c, 0x74, 0xa9, 0xa0, 0x3a, 0xac, 0x57, 0x51, 0xd3, 0x9d, 0xbc, 0x07,
	0x00, 0x00, 0xff, 0xff, 0xe1, 0x57, 0x96, 0x09, 0x07, 0x02, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FetchEnabled != that1.FetchEnabled {
		return false
	}
	if this.FetchActivated != that1.FetchActivated {
		return false
	}
	if this.TimeoutDuration != that1.TimeoutDuration {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.TimeoutDuration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.TimeoutDuration):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintTypes(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	if m.FetchActivated {
		i--
		if m.FetchActivated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.FetchEnabled {
		i--
		if m.FetchEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FetchEnabled {
		n += 2
	}
	if m.FetchActivated {
		n += 2
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.TimeoutDuration)
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FetchEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FetchEnabled = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FetchActivated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FetchActivated = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.TimeoutDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
